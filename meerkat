#!/bin/bash

defaultoption=syntax
option=${1-$defaultoption}

defaultstart=master # TODO this should be MOODLE_27_STABLE if need be
defaultend=HEAD

files="$(git diff $defaultstart $defaultend --name-only)"

if [ "$option" = "syntax" -o "$option" = "all" ]; then

    for modified_file in ${files}; do
        after=${after}"\n==\nFile: $modified_file\n==\n"
        after=$after"$(php local/codechecker/run.php $modified_file)"
        # TODO moodlecheck
    done;

    stash="$(git stash)"

    git checkout ${revision1} -- .

    for modified_file in ${files}; do
        before=${before}"\n==\nFile: $modified_file\n==\n"
        before=$before"$(php local/codechecker/run.php $modified_file)"
        # TODO moodlecheck
    done;

    git checkout HEAD .

    if [ ! "$stash" = "No local changes to save" ]; then
        git stash pop > /dev/null
    fi

    diff -y <(printf "${after}") <(printf "${before}") | less

fi

if [ "$option" = "test" -o "$option" = "all" ]; then

    paths=""

    for modified_file in ${files}
    do

        currentPath=$modified_file

        while [ ! -d "$testDir" -a -n "$currentPath" ]; do

            if [ -n "$currentPath" ]; then
                tryDir="$currentPath"tests/

                if [ -d "$tryDir" ]; then
                    testDir=$tryDir
                fi
            fi

            currentDirectory="${currentPath%?}"
            currentPath="$(echo $currentDirectory | grep -oh '^.*/')"

        done

        paths="$paths"$'\n'"$testDir"
        testDir=""

    done;

    # sort | uniq

    if [ -n "$paths" ]; then

        paths=$(sort <(printf "$paths"))
        paths=$(uniq <(printf "$paths"))

        for testDir in ${paths}; do

            if [ -d "$testDir" ]; then
                tests="$(ls -1d $testDir* | grep _test\.php)"

                while read -r test; do
                    echo "mdk phpunit -r -u "$test
                done <<< "$tests"
            fi

            if [ -d "$testDir"/behat ]; then
                tests="$(ls -1d ${testDir}behat/*)"

                while read -r test; do
                    echo "mdk behat -r -f "$test
                done <<< "$tests"
            fi

        done;

    fi

fi
